// Code generated by MockGen. DO NOT EDIT.
// Source: hub.go

// Package wirenet is a generated GoMock package.
package wirenet

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockcommandHub is a mock of commandHub interface
type MockcommandHub struct {
	ctrl     *gomock.Controller
	recorder *MockcommandHubMockRecorder
}

// MockcommandHubMockRecorder is the mock recorder for MockcommandHub
type MockcommandHubMockRecorder struct {
	mock *MockcommandHub
}

// NewMockcommandHub creates a new mock instance
func NewMockcommandHub(ctrl *gomock.Controller) *MockcommandHub {
	mock := &MockcommandHub{ctrl: ctrl}
	mock.recorder = &MockcommandHubMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockcommandHub) EXPECT() *MockcommandHubMockRecorder {
	return m.recorder
}

// Len mocks base method
func (m *MockcommandHub) Len() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Len")
	ret0, _ := ret[0].(int)
	return ret0
}

// Len indicates an expected call of Len
func (mr *MockcommandHubMockRecorder) Len() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Len", reflect.TypeOf((*MockcommandHub)(nil).Len))
}

// Register mocks base method
func (m *MockcommandHub) Register(cmd *command) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Register", cmd)
}

// Register indicates an expected call of Register
func (mr *MockcommandHubMockRecorder) Register(cmd interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockcommandHub)(nil).Register), cmd)
}

// Unregister mocks base method
func (m *MockcommandHub) Unregister(cmd *command) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Unregister", cmd)
}

// Unregister indicates an expected call of Unregister
func (mr *MockcommandHubMockRecorder) Unregister(cmd interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unregister", reflect.TypeOf((*MockcommandHub)(nil).Unregister), cmd)
}

// Close mocks base method
func (m *MockcommandHub) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close
func (mr *MockcommandHubMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockcommandHub)(nil).Close))
}
